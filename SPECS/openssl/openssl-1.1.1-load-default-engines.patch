diff --git a/crypto/init.c b/crypto/init.c
index 1b0d523bea..86e31c193e 100644
--- a/crypto/init.c
+++ b/crypto/init.c
@@ -402,6 +402,128 @@ DEFINE_RUN_ONCE_STATIC(ossl_init_engine_afalg)
 }
 #  endif
 # endif
+
+# ifndef OPENSSL_NO_SYMCRYPT_ENGINE
+static CRYPTO_ONCE engine_symcrypt = CRYPTO_ONCE_STATIC_INIT;
+DEFINE_RUN_ONCE_STATIC(ossl_init_engine_symcrypt)
+{
+    int ret = 0;
+
+    // Get the default engine directory from the environment - may be NULL
+    char* load_dir = ossl_safe_getenv("OPENSSL_ENGINES");
+
+    #ifdef ENGINESDIR
+    // Use the default engines directory, if defined
+    if(load_dir == NULL)
+    {
+            load_dir = ENGINESDIR;
+    }
+    #endif
+
+    ENGINE *dynamic = NULL;
+    ENGINE *symcrypt = NULL;
+
+    dynamic = ENGINE_by_id("dynamic");
+    if (!dynamic)
+        goto err;
+
+    // Add the engines directory to the list of directories to load from and specify that loading
+    // from the directory list is mandatory (via DIR_LOAD = 2). Otherwise OpenSSL will try to load
+    // the engine from the default ld search path, fail, and skip loading from the engines dir.
+    if (!ENGINE_ctrl_cmd_string(dynamic, "DIR_ADD", load_dir, 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "DIR_LOAD", "2", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "SO_PATH", "symcryptengine.so", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "ID", "symcrypt", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "LIST_ADD", "2", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "LOAD", NULL, 0))
+        goto err;
+
+    symcrypt = ENGINE_by_id("symcrypt");
+    if (!symcrypt)
+        goto err;
+
+    // Make SymCrypt the default engine for all algorithms
+    if (!ENGINE_set_default_string(symcrypt, "ALL"))
+        goto err;
+
+    ret = 1;
+err:
+    ENGINE_free(symcrypt);
+    ENGINE_free(dynamic);
+
+#  ifdef OPENSSL_INIT_DEBUG
+    fprintf(stderr, "OPENSSL_INIT: ossl_init_engine_symcrypt: %d\n",
+        ret);
+#  endif
+
+    return ret;
+}
+# endif
+
+#ifndef OPENSSL_NO_KEYSINUSE_ENGINE
+static CRYPTO_ONCE engine_keysinuse = CRYPTO_ONCE_STATIC_INIT;
+DEFINE_RUN_ONCE_STATIC(ossl_init_engine_keysinuse)
+{
+    int ret = 0;
+
+    ENGINE *dynamic = NULL;
+    ENGINE *keysinuse = NULL;
+
+    dynamic = ENGINE_by_id("dynamic");
+    if (!dynamic)
+        goto err;
+
+    // Get the default engine directory from the environment - may be NULL
+    char *load_dir = ossl_safe_getenv("OPENSSL_ENGINES");
+
+    # ifdef ENGINESDIR
+    // Use the default engines directory, if defined
+    if (load_dir == NULL)
+    {
+        load_dir = ENGINESDIR;
+    }
+    # endif
+
+    if (!ENGINE_ctrl_cmd_string(dynamic, "DIR_ADD", load_dir, 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "DIR_LOAD", "2", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "SO_PATH", "keysinuse.so", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "ID", "keysinuse", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "LIST_ADD", "2", 0))
+        goto err;
+    if (!ENGINE_ctrl_cmd_string(dynamic, "LOAD", NULL, 0))
+        goto err;
+
+    // Pass config values to keysinuse engine
+    keysinuse = ENGINE_by_id("keysinuse");
+    if (!keysinuse)
+        goto err;
+
+    // Make KeysInUse the default engine for RSA and EC algorithms
+    if (!ENGINE_set_default_string(keysinuse, "RSA,EC"))
+        goto err;
+
+    ret = 1;
+err:
+    ENGINE_free(keysinuse);
+    ENGINE_free(dynamic);
+
+#  ifdef OPENSSL_INIT_DEBUG
+    fprintf(stderr, "OPENSSL_INIT: ossl_init_engine_keysinuse: %d \n",
+            ret);
+#  endif
+
+    return ret;
+}
+# endif
 #endif
 
 #ifndef OPENSSL_NO_COMP
@@ -723,9 +845,14 @@ int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
             && !RUN_ONCE(&engine_rdrand, ossl_init_engine_rdrand))
         return 0;
 # endif
-    if ((opts & OPENSSL_INIT_ENGINE_DYNAMIC)
-            && !RUN_ONCE(&engine_dynamic, ossl_init_engine_dynamic))
-        return 0;
+    if (opts & OPENSSL_INIT_ENGINE_DYNAMIC)
+    {
+        if (!RUN_ONCE(&engine_dynamic, ossl_init_engine_dynamic))
+            return 0;
+
+        RUN_ONCE(&engine_symcrypt, ossl_init_engine_symcrypt);
+        RUN_ONCE(&engine_keysinuse, ossl_init_engine_keysinuse);
+    }
 # ifndef OPENSSL_NO_STATIC_ENGINE
 #  if !defined(OPENSSL_NO_HW) && !defined(OPENSSL_NO_HW_PADLOCK)
     if ((opts & OPENSSL_INIT_ENGINE_PADLOCK)
