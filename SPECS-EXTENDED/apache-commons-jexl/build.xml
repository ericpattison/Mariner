<?xml version="1.0" encoding="UTF-8"?>

<project name="commons-jexl" default="package" basedir=".">

  <!-- ====================================================================== -->
  <!-- Build environment properties                                           -->
  <!-- ====================================================================== -->

  <include file="common.xml"/>
  <property file="build.properties"/>

  <property name="javacc.home" value="lib"/>

  <property name="project.artifactId" value="commons-jexl"/>
  <property name="project.name" value="Commons JEXL"/>
  <property name="project.description" value="The Commons Jexl library is an implementation of the JSTL Expression Language with extensions."/>

  <property name="build.finalName" value="${project.artifactId}-${project.version}"/>
  <property name="build.dir" value="target"/>
  <property name="build.outputDir" value="${build.dir}/classes"/>
  <property name="build.srcDir" value="src/main/java"/>
  <property name="build.jjtreeDir" value="${build.dir}/generated-sources/jjtree"/>
  <property name="build.javaccDir" value="${build.dir}/generated-sources/java"/>
  <property name="build.resourceDir.0" value="src/main/resources"/>
  <property name="build.resourceDir.1" value="."/>
  <property name="build.testOutputDir" value="${build.dir}/test-classes"/>
  <property name="build.testDir" value="src/test/java"/>
  <property name="build.testResourceDir.0" value="src/test/resources"/>
  <property name="build.testResourceDir.1" value="."/>
  <property name="test.reports" value="${build.dir}/test-reports"/>
  <property name="reporting.outputDirectory" value="${build.dir}/site"/>

  <!-- ====================================================================== -->
  <!-- Defining classpaths                                                    -->
  <!-- ====================================================================== -->

  <path id="build.classpath">
    <fileset dir="lib">
      <!-- commons-logging-1.1.1 -->
      <include name="**/*.jar"/>
    </fileset>
  </path>
  <path id="build.test.classpath">
    <fileset dir="lib">
      <!-- commons-logging-1.1.1 -->
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- ====================================================================== -->
  <!-- Cleaning up target                                                     -->
  <!-- ====================================================================== -->

  <target name="clean" description="Clean the output directory">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Source generation target                                               -->
  <!-- ====================================================================== -->

  <target name="gen-sources" description="Generate the sources using javacc">
    <mkdir dir="${build.jjtreeDir}/org/apache/commons/jexl2/parser"/>
    <jjtree target="${build.srcDir}/org/apache/commons/jexl2/parser/Parser.jjt"
            outputdirectory="${build.jjtreeDir}/org/apache/commons/jexl2/parser"
            javacchome="${javacc.home}"/>
    <delete>
      <fileset dir="${build.jjtreeDir}/org/apache/commons/jexl2/parser">
	    <!-- Instead of the generated files, use the customized ones in sources -->
        <include name="**/ASTArrayLiteral.java"/>
        <include name="**/ASTIdentifier.java"/>
        <include name="**/ASTJexlScript.java"/>
        <include name="**/ASTMapLiteral.java"/>
        <include name="**/ASTNumberLiteral.java"/>
        <include name="**/ASTReferenceExpression.java"/>
        <include name="**/ASTStringLiteral.java"/>
        <include name="**/ASTVar.java"/>
        <include name="**/SimpleNode.java"/>
      </fileset>
    </delete>
    <mkdir dir="${build.javaccDir}/org/apache/commons/jexl2/parser"/>
    <javacc target="${build.jjtreeDir}/org/apache/commons/jexl2/parser/Parser.jj"
            outputdirectory="${build.javaccDir}/org/apache/commons/jexl2/parser"
            javacchome="${javacc.home}"/>
    <delete>
      <fileset dir="${build.javaccDir}/org/apache/commons/jexl2/parser">
	    <!-- Instead of the generated files, use the customized ones in sources -->
        <include name="**/ParseException.java"/>
        <include name="**/TokenMgrError.java"/>
      </fileset>
    </delete>
  </target>

  <!-- ====================================================================== -->
  <!-- Compilation target                                                     -->
  <!-- ====================================================================== -->

  <target name="compile" depends="gen-sources" description="Compile the code">
    <mkdir dir="${build.outputDir}"/>
    <javac destdir="${build.outputDir}"
           encoding="iso-8859-1"
           nowarn="false"
           debug="true"
           optimize="false"
           deprecation="true"
           target="${compiler.target}"
           verbose="false"
           fork="false"
           source="${compiler.source}">
      <src>
        <pathelement location="${build.srcDir}"/>
        <pathelement location="${build.jjtreeDir}"/>
        <pathelement location="${build.javaccDir}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.outputDir}">
      <fileset dir="${build.resourceDir.0}"/>
    </copy>
    <mkdir dir="${build.outputDir}/META-INF"/>
    <copy todir="${build.outputDir}/META-INF">
      <fileset dir="${build.resourceDir.1}">
        <include name="NOTICE.txt"/>
        <include name="LICENSE.txt"/>
      </fileset>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Test-compilation target                                                -->
  <!-- ====================================================================== -->

  <target name="compile-tests"
          depends="compile"
          description="Compile the test code"
          unless="test.skip">
    <mkdir dir="${build.testOutputDir}"/>
    <javac destdir="${build.testOutputDir}"
           encoding="iso-8859-1"
           nowarn="false"
           debug="true"
           optimize="false"
           deprecation="true"
           target="${compiler.target}"
           verbose="false"
           fork="false"
           source="${compiler.source}">
      <src>
        <pathelement location="${build.testDir}"/>
      </src>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
    </javac>
    <mkdir dir="${build.testOutputDir}/META-INF"/>
    <copy todir="${build.testOutputDir}/META-INF">
      <fileset dir="${build.testResourceDir.1}">
        <include name="NOTICE.txt"/>
        <include name="LICENSE.txt"/>
      </fileset>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Run all tests                                                          -->
  <!-- ====================================================================== -->

  <target name="test"
          depends="compile-tests, junit-missing"
          unless="junit.skipped"
          description="Run the test cases">
    <mkdir dir="${test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.testOutputDir}"/>
      </classpath>
      <batchtest todir="${test.reports}" unless="test">
        <fileset dir="${build.testDir}">
          <include name="**/*Test.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
      <batchtest todir="${test.reports}" if="test">
        <fileset dir="${build.testDir}">
          <include name="**/${test}.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present" classpathref="build.test.classpath"/>
  </target>

  <target name="test-junit-status"
          depends="test-junit-present">
    <condition property="junit.missing">
      <and>
        <isfalse value="${junit.present}"/>
        <isfalse value="${test.skip}"/>
      </and>
    </condition>
    <condition property="junit.skipped">
      <or>
        <isfalse value="${junit.present}"/>
        <istrue value="${test.skip}"/>
      </or>
    </condition>
  </target>

  <target name="junit-missing"
          depends="test-junit-status"
          if="junit.missing">
    <echo>=================================== WARNING ===================================</echo>
    <echo> JUnit is not present in the test classpath or your $ANT_HOME/lib directory. Tests not executed.</echo>
    <echo>===============================================================================</echo>
  </target>

  <!-- ====================================================================== -->
  <!-- Javadoc target                                                         -->
  <!-- ====================================================================== -->

  <target name="javadoc" depends="gen-sources" description="Generates the Javadoc of the application">
    <javadoc packagenames="*"
             destdir="${reporting.outputDirectory}/apidocs"
             access="protected"
             verbose="false"
             encoding="iso-8859-1"
             version="true"
             use="true"
             author="true"
             splitindex="false"
             nodeprecated="false"
             nodeprecatedlist="false"
             notree="false"
             noindex="false"
             nohelp="false"
             nonavbar="false"
             serialwarn="false"
             charset="ISO-8859-1"
             source="${compiler.source}"
             linksource="true"
             breakiterator="false"
             classpathref="build.classpath">
      <fileset dir="${build.srcDir}"/>
      <fileset dir="${build.jjtreeDir}"/>
      <fileset dir="${build.javaccDir}"/>
    </javadoc>
  </target>

  <!-- ====================================================================== -->
  <!-- Package target                                                         -->
  <!-- ====================================================================== -->

  <target name="package" depends="compile,test" description="Package the application">
    <jar jarfile="${build.dir}/${build.finalName}.jar"
         compress="true"
         index="false"
         basedir="${build.outputDir}"
         excludes="**/package.html">
      <manifest>
        <attribute name="Bundle-Description" value="${project.description}"/>
        <attribute name="Bundle-DocURL" value="${project.url}"/>
        <attribute name="Bundle-License" value="${project.license.url}"/>
        <attribute name="Bundle-ManifestVersion" value="2"/>
        <attribute name="Bundle-Name" value="${project.name}"/>
        <attribute name="Bundle-SymbolicName" value="${project.groupId}.${project.artifactId}"/>
        <attribute name="Bundle-Vendor" value="${project.organization.name}"/>
        <attribute name="Bundle-Version" value="${project.version}"/>
        <attribute name="Export-Package" value="org.apache.commons.jexl2;version=&quot;${project.version}&quot;,org.apache.commons.jexl2.internal;version=&quot;${project.version}&quot;,org.apache.commons.jexl2.internal.introspection;version=&quot;${project.version}&quot;,org.apache.commons.jexl2.introspection;version=&quot;${project.version}&quot;,org.apache.commons.jexl2.parser;version=&quot;${project.version}&quot;,org.apache.commons.jexl2.scripting;version=&quot;${project.version}&quot;"/>
        <attribute name="Implementation-Title" value="${project.name}"/>
        <attribute name="Implementation-URL" value="${project.url}"/>
        <attribute name="Implementation-Vendor" value="${project.organization.name}"/>
        <attribute name="Implementation-Vendor-Id" value="org.apache"/>
        <attribute name="Implementation-Version" value="${project.version}"/>
        <attribute name="Import-Package" value="javax.script,org.apache.commons.logging"/>
        <attribute name="Include-Resource" value="META-INF/services/javax.script.ScriptEngineFactory=src/main/resources/META-INF/services/javax.script.ScriptEngineFactory,META-INF/NOTICE.txt=NOTICE.txt,META-INF/LICENSE.txt=LICENSE.txt"/>
        <attribute name="JavaPackages-ArtifactId" value="${project.artifactId}"/>
        <attribute name="JavaPackages-GroupId" value="${project.groupId}"/>
        <attribute name="JavaPackages-Version" value="${project.version}"/>
        <attribute name="Require-Capability" value="osgi.ee;filter:=&quot;(&amp;(osgi.ee=JavaSE)(version=${compiler.target}))&quot;"/>
        <attribute name="Specification-Title" value="${project.name}"/>
        <attribute name="Specification-Vendor" value="${project.organization.name}"/>
        <attribute name="Specification-Version" value="${project.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- ====================================================================== -->
  <!-- A dummy target for the package named after the type it creates         -->
  <!-- ====================================================================== -->

  <target name="jar" depends="package" description="Builds the jar for the application"/>

</project>
