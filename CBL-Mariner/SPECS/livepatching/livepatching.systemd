#!/bin/bash
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

install_patch_after_kernel_change() {
    local installable_patch="livepatch-$RUNNING_KERNEL_VERSION"
    local patch_module_name
    local patch_module_path

    echo "Making sure patch is installed after a kernel reboot."

    if [[ "$RUNNING_KERNEL_VERSION" != "$INSTALLED_KERNEL_VERSION" ]]
    then
        echo "Running kernel ($RUNNING_KERNEL_VERSION) different than installed kernel ($INSTALLED_KERNEL_VERSION). Nothing to do."
        return 0
    fi

    if ! rpm --quiet -q --whatprovides "$installable_patch"
    then
        echo "No livepatch package installed for running kernel ($RUNNING_KERNEL_VERSION)."
        return 0
    fi

    patch_module_path=$(rpm -ql --whatprovides "$installable_patch" | grep "ko$")
    if [[ ! -f "$patch_module_path" ]]
    then
        echo "Initial (empty) livepatch installed for kernel ($RUNNING_KERNEL_VERSION) - no livepatch module to install."
        return 0
    fi

    patch_module_name=$(basename "$patch_module_path" | cut -d. -f1)
    if patch_installed "$patch_module_name"
    then
        echo "Patch already installed for the running kernel ($RUNNING_KERNEL_VERSION)."
        return 0
    fi

    kpatch install "$patch_module_path"
}

install_livepatch_package() {
    local kernel_version
    local patch_package

    kernel_version="$1"
    patch_package="livepatch = $kernel_version"

    echo "Checking if a livepatch is available for kernel version ($kernel_version)."
    if ! tdnf -q list available "$patch_package" >/dev/null
    then
        echo "No livepatches available for kernel version ($kernel_version)."
        return 0
    fi

    echo "Livepatch available for kernel version ($kernel_version). Checking if it's already installed."
    if tdnf -q list installed "$patch_package" >/dev/null
    then
        echo "Livepatch for kernel version ($kernel_version) already installed."
    else
        echo "Installing livepatch for kernel version ($kernel_version)."

        tdnf -q install -y "$patch_package" >/dev/null
    fi
}

patch_installed() {
    kpatch list | grep -qP "$1.*$RUNNING_KERNEL_VERSION"
}

read_installed_kernel_version() {
    realpath /boot/mariner.cfg | grep -oP "(?<=linux-).*(?=\.cfg)"
}

read_running_kernel_version() {
    uname -r
}

wait_for_kernel_change() {
    local new_kernel_version

    echo "Waiting for RPM database changes."

    while inotifywait -e close_write /var/lib/rpm/rpmdb.sqlite &>/dev/null
    do
        echo "Change detected, checking if different kernel got installed."

        new_kernel_version=$(read_installed_kernel_version)
        if [[ "$INSTALLED_KERNEL_VERSION" != "$new_kernel_version" ]]
        then
            echo "Detected new kernel version ($new_kernel_version)."

            INSTALLED_KERNEL_VERSION=$new_kernel_version
            return 0
        fi

        echo "No changes to the kernel. Going back to waiting."
    done
}

RUNNING_KERNEL_VERSION=$(read_running_kernel_version)
INSTALLED_KERNEL_VERSION=$(read_installed_kernel_version)

echo "Running kernel:   $RUNNING_KERNEL_VERSION."
echo "Installed kernel: $INSTALLED_KERNEL_VERSION."

install_patch_after_kernel_change

# Letting systemd know the service finished its startup and kpatch can now run.
systemd-notify --ready

install_livepatch_package "$RUNNING_KERNEL_VERSION"

if [[ "$RUNNING_KERNEL_VERSION" != "$INSTALLED_KERNEL_VERSION" ]]
then
    echo "Kernel will change after reboot ($RUNNING_KERNEL_VERSION -> $INSTALLED_KERNEL_VERSION). Installing patches for post-reboot kernel."
    install_livepatch_package "$INSTALLED_KERNEL_VERSION"
fi

while wait_for_kernel_change
do
    install_livepatch_package "$INSTALLED_KERNEL_VERSION"
done
