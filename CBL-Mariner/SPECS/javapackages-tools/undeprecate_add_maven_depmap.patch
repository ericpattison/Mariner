--- b/install
+++ a/install
@@ -150,6 +150,7 @@
 
 link "${bindir}/abs2rel" "${javadir}-utils/abs2rel.sh"
 
+inst_data java-utils/maven_depmap.py "${javadir}-utils"
 inst_data java-utils/pom_editor.py "${javadir}-utils"
 inst_data java-utils/request-artifact.py "${javadir}-utils"
 inst_data java-utils/builddep.py "${javadir}-utils"
--- /dev/null
+++ a/java-utils/maven_depmap.py
@@ -0,0 +1,315 @@
+#
+# Copyright (c) 2014, Red Hat, Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+#
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the
+#    distribution.
+# 3. Neither the name of Red Hat nor the names of its
+#    contributors may be used to endorse or promote products derived
+#    from this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: Stanislav Ochotnicky <sochotnicky@redhat.com>
+#
+# this script is used by add_maven_depmap rpm macro to generate
+# mapping between maven groupId:artifactId and jar file in our local
+# filesystem (i.e. %{_javadir})
+# rpm macro expects to find this file as %{_javadir}-utils/maven_depmap.py
+
+
+from optparse import OptionParser
+import os
+import shutil
+import sys
+
+from os.path import basename, dirname
+import zipfile
+from time import gmtime, strftime
+from copy import deepcopy
+
+from javapackages.maven.pom import POM
+from javapackages.metadata.artifact import MetadataArtifact
+from javapackages.metadata.alias import MetadataAlias
+from javapackages.metadata.metadata import Metadata
+
+from javapackages.common.exception import JavaPackagesToolsException
+
+
+class PackagingTypeMissingFile(JavaPackagesToolsException):
+    def __init__(self, pom_path):
+        self.args=("Packaging type is not 'pom' and no artifact path has been provided for POM %s" % pom_path,)
+
+class IncompatibleFilenames(JavaPackagesToolsException):
+    def __init__(self, pom_path, jar_path):
+        self.args=("Filenames of POM %s and JAR %s does not match properly. Check that JAR subdirectories matches '.' in pom name." % (pom_path, jar_path),)
+
+class ExtensionsDontMatch(JavaPackagesToolsException):
+    def __init__(self, coordinates_ext, file_ext):
+        self.args=("Extensions don't match: '%s' != '%s'" % (coordinates_ext, file_ext),)
+
+class MissingJarFile(JavaPackagesToolsException):
+    def __init__(self):
+        self.args=("JAR seems to be missing in standard directories. Make sure you have installed it",)
+
+class UnknownFileExtension(JavaPackagesToolsException):
+    def __init__(self, jar_path):
+        self.args=("Unknown file extension: %s" % (jar_path),)
+
+
+def _print_path_with_dirs(path, base):
+    print(path)
+    path = dirname(path)
+    while path != base and path != '/':
+        print("%dir " + path)
+        path = dirname(path)
+
+
+def _make_files_versioned(versions, pom_path, jar_path, pom_base, jar_base):
+    """Make pom and jar file versioned"""
+    versions = sorted(set(versions.split(',')))
+
+    vpom_path = pom_path
+    vjar_path = jar_path
+
+    ret_pom_path = pom_path
+    ret_jar_path = jar_path
+
+    # pom
+    if ':' not in vpom_path:
+        root, ext = os.path.splitext(vpom_path)
+        symlink = False
+        for ver in sorted(versions):
+            dest = "%s-%s%s" % (root, ver, ext)
+            if not symlink:
+                shutil.copy(os.path.realpath(vpom_path), dest)
+                symlink = True
+                vpom_path = dest
+                ret_pom_path = dest
+            else:
+                os.symlink(basename(vpom_path), dest)
+            # output file path for file lists
+            _print_path_with_dirs(dest, pom_base)
+        # remove unversioned pom
+        os.remove(pom_path)
+
+    # jar
+    if vjar_path:
+        root, ext = os.path.splitext(vjar_path)
+        symlink = False
+        for ver in sorted(versions):
+            dest = "%s-%s%s" % (root, ver, ext)
+            if not symlink:
+                shutil.copy(os.path.realpath(vjar_path), dest)
+                symlink = True
+                vjar_path = dest
+                ret_jar_path = dest
+            else:
+                os.symlink(basename(vjar_path), dest)
+            # output file path for file lists
+            _print_path_with_dirs(dest, jar_base)
+        # remove unversioned jar
+        os.remove(jar_path)
+
+    # return paths to versioned, but regular files (not symlinks)
+    return ret_pom_path, ret_jar_path
+
+
+# Add a file to a ZIP archive (or JAR, WAR, ...) unless the file
+# already exists in the archive.  Provided by Tomas Radej.
+def append_if_missing(archive_name, file_name, file_contents):
+    archive = zipfile.ZipFile(archive_name, 'a')
+    try:
+        if file_name not in archive.namelist():
+            archive.writestr(file_name, file_contents)
+    finally:
+        archive.close()
+
+
+# Inject pom.properties if JAR doesn't have one.  This is necessary to
+# identify the origin of JAR files that are present in the repository.
+def inject_pom_properties(jar_path, artifact):
+    if not zipfile.is_zipfile(jar_path):
+        return
+    props_path = "META-INF/maven/{a.groupId}/{a.artifactId}/pom.properties".format(a=artifact)
+    properties = """#Generated by Java Packages Tools
+version={a.version}
+groupId={a.groupId}
+artifactId={a.artifactId}
+""".format(a=artifact)
+
+    if artifact.extension:
+        properties = properties + \
+            "extension={ext}\n".format(ext=artifact.extension)
+    if artifact.classifier:
+        properties = properties + \
+            "classifier={clas}\n".format(clas=artifact.classifier)
+
+    append_if_missing(jar_path, props_path, properties)
+
+
+def add_compat_versions(artifact, versions):
+    if not versions:
+        return artifact
+
+    artifact.compatVersions = versions.split(',')
+    return artifact
+
+
+def add_aliases(artifact, additions):
+    if not additions:
+        return artifact
+
+    aliases = additions.split(',')
+    result = list()
+    for a in aliases:
+        alias = MetadataAlias.from_mvn_str(a)
+        alias.extension = artifact.extension
+        result.append(alias)
+
+    artifact.aliases = result
+    return artifact
+
+
+def write_metadata(metadata_file, artifacts):
+    if os.path.exists(metadata_file):
+        metadata = Metadata.create_from_file(metadata_file)
+    else:
+        metadata = Metadata()
+
+    # pylint:disable=E1103
+    metadata.artifacts += deepcopy(artifacts)
+
+    metadata.write_to_file(metadata_file)
+
+
+def _main():
+    usage="usage: %prog [options] metadata_path pom_path|<MVN spec> [jar_path]"
+    parser = OptionParser(usage=usage)
+    parser.add_option("-a","--append",type="str",
+                      help="Additional depmaps to add (gid:aid)  [default: %default]")
+    parser.add_option('-r', '--versions', type="str",
+                      help='Additional versions to add for each depmap')
+    parser.add_option('-n', '--namespace', type="str",
+                      help='Namespace to use for generated fragments', default="")
+    parser.add_option('--pom-base', type="str",
+                      help='Base path under which POM files are installed', default="")
+    parser.add_option('--jar-base', type="str",
+                      help='Base path under which JAR files are installed', default="")
+
+    parser.set_defaults(append=None)
+
+    (options, args) = parser.parse_args()
+    append_deps = options.append
+    add_versions = options.versions
+    namespace = options.namespace
+    pom_base = options.pom_base
+    jar_base = options.jar_base
+
+    if len(args) < 2:
+        parser.error("Incorrect number of arguments")
+    # These will fail when incorrect number of arguments is given.
+    metadata_path = args[0].strip()
+    pom_path = args[1].strip()
+    jar_path = None
+
+    artifact = None
+    have_pom = False
+
+    if len(args) == 3:
+        jar_path = args[2].strip()
+        if ':' in pom_path:
+            pom_str = pom_path.rsplit('/')[-1]
+            artifact = MetadataArtifact.from_mvn_str(pom_str)
+            artifact_ext = artifact.extension or "jar"
+            file_ext = os.path.splitext(jar_path)[1][1:]
+            if artifact_ext != file_ext:
+                raise ExtensionsDontMatch(artifact_ext, file_ext)
+
+            if artifact.extension == 'jar':
+                artifact.extension = ''
+
+            if not artifact.version:
+                parser.error("Artifact definition has to include version")
+        else:
+            artifact = MetadataArtifact.from_pom(pom_path)
+            ext = os.path.splitext(jar_path)[1][1:]
+            if ext != "jar":
+                artifact.extension = ext
+            have_pom = True
+        if artifact:
+            inject_pom_properties(jar_path, artifact)
+    else:
+        # looks like POM only artifact
+        if ':' not in pom_path:
+            artifact = MetadataArtifact.from_pom(pom_path)
+            have_pom = True
+
+            if POM(pom_path).packaging != "pom":
+                raise PackagingTypeMissingFile(pom_path)
+        else:
+            sys.exit("JAR file path must be specified when using artifact coordinates")
+
+
+    # output file path for file lists
+    print(metadata_path)
+
+    artifact = add_compat_versions(artifact, add_versions)
+    if add_versions:
+        pom_path, jar_path = _make_files_versioned(add_versions, pom_path, jar_path, pom_base, jar_base)
+
+    if namespace:
+        artifact.namespace = namespace
+
+    artifact.properties["xmvn.resolver.disableEffectivePom"] = "true"
+
+
+    buildroot = os.environ.get('RPM_BUILD_ROOT')
+    am = []
+    if jar_path:
+        metadata_jar_path = os.path.abspath(jar_path)
+        artifact.path = metadata_jar_path.replace(buildroot, "") if buildroot else metadata_jar_path
+        artifact = add_aliases(artifact, append_deps)
+        if artifact.extension == "jar":
+            artifact.extension = ""
+        am.append(artifact.copy())
+        # output file path for file list (if it's not versioned)
+        if not add_versions:
+            _print_path_with_dirs(jar_path, jar_base)
+    if have_pom:
+        metadata_pom_path = os.path.abspath(pom_path)
+        artifact.path = metadata_pom_path.replace(buildroot, "") if buildroot else metadata_pom_path
+        artifact.extension = "pom"
+        artifact.aliases = None
+        artifact = add_aliases(artifact, append_deps)
+        am.append(artifact.copy())
+        # output file path for file list (if it's not versioned)
+        if not add_versions:
+            _print_path_with_dirs(pom_path, pom_base)
+
+    write_metadata(metadata_path, am)
+
+
+if __name__ == "__main__":
+    try:
+        _main()
+    except JavaPackagesToolsException as e:
+        sys.exit(e)
--- b/macros.d/macros.fjava
+++ a/macros.d/macros.fjava
@@ -173,6 +173,69 @@
 %mvn_subst %{?jpb_env} xmvn-subst %{?base_xmvn_opts} %{?xmvn_subst_opts} -R %{buildroot}
 
 
+#==============================================================================
+#
+# add_maven_depmap is simplified version of jpackage-style add_to_maven_depmap
+#
+# IMPORTANT: This macro is obsolete. Use mvn_artifact macro instead.
+#
+# -f addition to fragment name
+# -a is "g1:a1,g2:a2" formatted string with additional depmaps (groupId:artifactId,...)
+# -v is "v1,v2" formatted string with additional compatibility versions
+#    supposed to be provided (jar,pom will be renamed to -%{version} variants
+#    and additional symlinks optionally created)
+# %1 is the pom filename relative to mavenpomdir
+# %2 is the path to jar file (when omitted we deal with parent pom file without jar)
+#
+# add_maven_depmap automatically parses pom file and it will fail with incorrect pom
+# or jar filename
+#
+# in the end add_maven_depmap optionally moves jar and pom file to
+# -%{version} variant and can create additional versioned symlinks
+
+%add_maven_depmap(f:a:v:) \
+set -e \
+%{lua:io.stderr:write("[WARNING] Deprecated \%add_maven_depmap macro is used. ", \
+"Please use \%mvn_artifact and %mvn_install instead.\\n")} \
+# default values \
+%if %# == 0 \
+   _pompart="JPP-%{name}.pom" \
+   _jarpart="%{name}.jar" \
+%else \
+   _pompart="%1" \
+   _jarpart="%2" \
+%endif \
+_filelist=".mfiles%{-f*:-%{-f*}}" \
+install -dm 755 %{buildroot}%{_datadir}/maven-metadata \
+_jbase= \
+_jpath= \
+for _dir in %{_jnidir} %{_javadir}; do \
+    if [ -f %{buildroot}$_dir/$_jarpart ]; then \
+	_jbase="%{buildroot}$_dir" \
+	_jpath="$_jbase/$_jarpart" \
+    fi \
+done \
+%if %# != 1 \
+    [ -z "$_jpath" ] && (echo "%0 error: $_jarpart - file not found" 1>&2; exit 1) \
+%endif \
+@{pyinterpreter} @{javadir}-utils/maven_depmap.py %{-a} %{-v*:-r %{-v*}} \\\
+                 --pom-base %{buildroot}%{_mavenpomdir} \\\
+                 --jar-base "$_jbase" \\\
+                 %{buildroot}%{_datadir}/maven-metadata/%{name}%{-f*:-%{-f*}}.xml \\\
+                 %{buildroot}%{_mavenpomdir}/$_pompart \\\
+%if %# == 2 \
+          "${_jpath}" \\\
+%endif \
+%if %# == 0 \
+          "${_jpath}" \\\
+%endif \
+        >> ${_filelist} \
+sed -i 's:%{buildroot}::' ${_filelist} \
+sort -u -o ${_filelist} ${_filelist} \
+\
+%{nil}
+
+
 #==============================================================================
 #
 # %pom_* -- macros for batch editing of POM files
--- /dev/null
+++ a/test/maven_depmap_test.py
@@ -0,0 +1,340 @@
+import inspect
+from zipfile import ZipFile
+import os
+import unittest
+import shutil
+from test_common import (DIRPATH, mvn_depmap, call_script,
+                         prepare_metadata, assertIn)
+from test_rpmbuild import Package
+
+from lxml import etree
+from xml_compare import compare_lxml_etree
+
+
+class TestMavenDepmap(unittest.TestCase):
+
+    maxDiff = 2048
+
+    def setUp(self):
+        try:
+            self.olddir = os.getcwd()
+            self.datadir = os.path.join(DIRPATH,
+                                        'data',
+                                        'maven_depmap')
+            self.workdir = os.path.realpath(os.path.join(self.datadir, "..",
+                                            "maven_depmap_workdir"))
+
+            shutil.copytree(self.datadir, self.workdir)
+            os.chdir(self.workdir)
+        except OSError:
+            pass
+
+        prepare_metadata(self.workdir)
+
+    def tearDown(self):
+        try:
+            shutil.rmtree(self.workdir)
+            os.chdir(self.olddir)
+        except OSError:
+            pass
+
+    def check_result(self, test_name, depmap):
+        got = etree.fromstring(depmap)
+        want = etree.parse(os.path.join(self.workdir,
+                                        test_name+"-want.xml")).getroot()
+        report = compare_lxml_etree(got, want, unordered=['artifact', 'maven'])
+        if report:
+            report = '\n' + report
+        return report
+
+    def check_archive(self, test_name, archive_path, keep_comments=False):
+        got = ZipFile(archive_path, 'r')
+        want = ZipFile('{name}-want.{ext}'.format(name=test_name,
+                       ext=archive_path.split('.')[-1]))
+        try:
+            if got.testzip() is not None:
+                return ("Not valid zip file", "")
+            got_mf = self.read_archive(got, keep_comments)
+            want_mf = self.read_archive(want, keep_comments)
+        finally:
+            got.close()
+            want.close()
+        return (got_mf, want_mf)
+
+    def read_archive(self, archive, keep_comments=False):
+        res = {}
+        for filename in archive.namelist():
+            mf_file = archive.open(filename)
+            try:
+                if (keep_comments):
+                    res[str(filename)] = mf_file.readlines()
+                else:
+                    res[str(filename)] = \
+                            [line for line in mf_file.readlines()
+                                    if not line.startswith(b'#')]
+            finally:
+                mf_file.close()
+        return res
+
+    @mvn_depmap('JPP-bndlib.pom', 'usr/share/java/bndlib.jar')
+    def test_basic(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('JPP-commons-io.pom')
+    def test_missing_jar_arg(self, stdout, stderr, return_value, depmap):
+        self.assertNotEqual(return_value, 0)
+
+    @mvn_depmap('JPP-apache-commons-io.pom')
+    def test_packaging_pom_no_jar(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('JPP-noversion.pom')
+    def test_missing_version(self, stdout, stderr, return_value, depmap):
+        self.assertNotEqual(return_value, 0)
+
+    @mvn_depmap('JPP-parent-version.pom')
+    def test_parent_version(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('JPP-commons-war.pom', 'usr/share/java/commons-war.war')
+    def test_war(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    def test_not_pom(self):
+        stdout, stderr, return_value = call_script(os.path.join(DIRPATH, '..',
+            'java-utils', 'maven_depmap.py'),
+                ['.out', 'usr/share/java/commons-io.jar',
+                    'usr/share/java/commons-io.jar'])
+        self.assertNotEqual(return_value, 0)
+
+    def test_no_pom(self):
+        stdout, stderr, return_value = call_script(os.path.join(DIRPATH, '..',
+            'java-utils', 'maven_depmap.py'),
+                ['.out'])
+        self.assertNotEqual(return_value, 0)
+
+    def test_no_args(self):
+        stdout, stderr, return_value = call_script(os.path.join(DIRPATH, '..',
+            'java-utils', 'maven_depmap.py'),
+                [])
+        self.assertNotEqual(return_value, 0)
+
+    @mvn_depmap('a:b:12', 'usr/share/java/commons-io.jar')
+    def test_mvn_spec(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('a:b:war::1', 'usr/share/java/commons-war.war')
+    def test_mvn_spec_war(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('/builddir/build/BUILDROOT/pkg-2.5.2-2.fc21.x86_64/a:b:war::1',
+            'usr/share/java/commons-war.war')
+    def test_mvn_spec_buildroot(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('builddir/build/BUILDROOT/usr/share/maven-poms/JPP-commons-war.pom',
+                'usr/share/java/commons-war.war')
+    def test_buildroot(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                   depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('a:b:12', 'usr/share/java/commons-io.jar', ['-a', 'x:y'])
+    def test_append(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    # FIXME: aliases cause trouble
+    #@mvn_depmap('a:b:12', 'usr/share/java/commons-io.jar', ['-a', 'x:y,z:w'])
+    #def test_append_multiple(self, stdout, stderr, return_value, depmap):
+    #    self.assertEqual(return_value, 0, stderr)
+    #    report = self.check_result(inspect.currentframe().f_code.co_name,
+    #                                       depmap)
+    #    self.assertEqual(report, '', report)
+
+    @mvn_depmap('a:b:12', 'usr/share/java/commons-io.jar', ['-n', 'myns'])
+    def test_namespace(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('a:b:12', 'usr/share/java/commons-io.jar', ['--namespace=myns',
+        '--append=x:y'])
+    def test_append_and_namespace(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('a:b:12', 'usr/foo/share/java/compare_jar.jar')
+    def test_compare_jar(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        got, want = self.check_archive(inspect.currentframe().f_code.co_name,
+                'usr/foo/share/java/compare_jar.jar')
+        self.assertEqual(got, want)
+
+    #test case for rhbz#1012982
+    @mvn_depmap('x:y:war:z:0.1', 'usr/foo/share/java/compare_jar_class_ext.war')
+    def test_compare_jar_class_ext(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        got, want = self.check_archive(inspect.currentframe().f_code.co_name,
+                'usr/foo/share/java/compare_jar_class_ext.war')
+        self.assertEqual(got, want)
+
+    @mvn_depmap('a:b:12', 'usr/share/java/already-has-pom-properties.jar')
+    def test_compare_jar_unmodified(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        got, want = self.check_archive(inspect.currentframe().f_code.co_name,
+                'usr/share/java/already-has-pom-properties.jar', keep_comments=True)
+        self.assertEqual(got, want)
+
+    @mvn_depmap('x:y:0.1', 'usr/share/java/already-has-pom-properties.jar')
+    def test_compare_jar_modified(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        got, want = self.check_archive(inspect.currentframe().f_code.co_name,
+                'usr/share/java/already-has-pom-properties.jar')
+        self.assertEqual(got, want)
+
+    @mvn_depmap('/builddir/build/BUILDROOT/pkg-2.5.2-2.fc21.x86_64/x:y:0.1',
+            'usr/share/java/already-has-pom-properties.jar')
+    def test_rhbz1012245(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        got, want = self.check_archive('test_compare_jar_modified',
+                'usr/share/java/already-has-pom-properties.jar')
+        self.assertEqual(got, want)
+
+    @mvn_depmap('x:y:jar:z:0.1', 'usr/share/java/commons-io-z.jar',
+            ['-a', 'a:b:jar:c:12'])
+    def test_classifier(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('x:y:0.1', 'usr/share/java/commons-io.jar', ['-r', '1,2,3'])
+    def test_version(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('JPP/x:y:0.1', 'usr/share/java/commons-io.jar',
+            ['--versions', '1,2,3'])
+    def test_version2(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result('test_version', depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('x:y:0.1', 'usr/share/java/commons-io.jar',
+            ['-r', '1,2,3', '-a', 'a:b:32'])
+    def test_version_append(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('x:y:0.1', 'usr/share/java/commons-io.jar',
+            ['-r', '1,2,3', '-n', 'ns', '-a', 'a:b:32'])
+    def test_version_namespace(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('x:y', 'usr/share/java/commons-io.jar')
+    def test_missing_version2(self, stdout, stderr, return_value, depmap):
+        self.assertNotEqual(return_value, 0)
+
+    @mvn_depmap('x:y:war:1', 'usr/share/java/commons-io.jar')
+    def test_incorrect_extension(self, stdout, stderr, return_value, depmap):
+        self.assertNotEqual(return_value, 0)
+
+    @mvn_depmap('evil:', 'usr/share/java/commons-io.jar')
+    def test_incorrect_artifact(self, stdout, stderr, return_value, depmap):
+        self.assertNotEqual(return_value, 0)
+
+    @mvn_depmap('JPP-cdata.pom')
+    def test_cdata(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    @mvn_depmap('g:a:war:1.2.3', 'usr/share/java/versioned.war', ['-r', '2.0.0'])
+    def test_versioned(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+        self.assertEqual(False, os.path.exists('usr/share/java/versioned.war'))
+        self.assertEqual(True, os.path.exists('usr/share/java/versioned-2.0.0.war'))
+
+    @mvn_depmap('g:a:1.2', 'usr/share/java/versioned2.jar', ['-r', '1.2'])
+    def test_versioned2(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+        self.assertEqual(False, os.path.exists('usr/share/java/versioned2.jar'))
+        self.assertEqual(True, os.path.exists('usr/share/java/versioned2-1.2.jar'))
+
+    @mvn_depmap('g:a:jar:tests:1', 'usr/share/java/versioned-3-tests.jar', ['-r', '1,1.2'])
+    def test_versioned_classifier(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+        self.assertEqual(False, os.path.exists('usr/share/java/versioned-3-tests.jar'))
+        self.assertEqual(True, os.path.exists('usr/share/java/versioned-3-tests-1.jar'))
+        self.assertEqual(True, os.path.exists('usr/share/java/versioned-3-tests-1.2.jar'))
+
+    @mvn_depmap('JPP-testversioned.pom', 'usr/share/java/testversioned.jar', ['-r', '2013.10'])
+    def test_versioned_with_pom(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+        self.assertEqual(False, os.path.exists('usr/share/java/testversioned.jar'))
+        self.assertEqual(True, os.path.exists('usr/share/java/testversioned-2013.10.jar'))
+
+    @mvn_depmap('JPP-alias.pom', 'usr/share/java/commons-io.jar', ['-a', 'a:b'])
+    def test_alias_extension(self, stdout, stderr, return_value, depmap):
+        self.assertEqual(return_value, 0, stderr)
+        report = self.check_result(inspect.currentframe().f_code.co_name,
+                                           depmap)
+        self.assertEqual(report, '', report)
+
+    def test_missing_jar(self):
+        p = Package('test')
+        p.append_to_prep("%add_maven_depmap g:a:1 this/file/doesnt/exist.jar")
+        _, stderr, return_value = p.run_prep()
+        self.assertEqual(1, return_value, 'bad return value')
+        assertIn(self, 'file not found', stderr)
+
+if __name__ == '__main__':
+    unittest.main()
--- b/test/test_common.py
+++ a/test/test_common.py
@@ -266,6 +266,28 @@
     return args, kwargs
 
 
+def mvn_depmap(pom, jar=None, fnargs=None):
+    def test_decorator(fun):
+        @wraps(fun)
+        def test_decorated(self):
+            os.chdir(self.workdir)
+            buildroot = os.path.join(self.workdir, "builddir/build/BUILDROOT")
+            env = {'RPM_BUILD_ROOT': buildroot}
+            scriptpath = path.join(DIRPATH, '..', 'java-utils', 'maven_depmap.py')
+            args = ['.fragment_data', pom]
+            if jar:
+                args.append(path.join(os.getcwd(), jar))
+            args.extend(fnargs or [])
+            (stdout, stderr, return_value) = call_script(scriptpath, args, extra_env=env)
+            frag = None
+            if return_value == 0:
+                with open('.fragment_data','r') as frag_file:
+                    frag = frag_file.read()
+                os.remove('.fragment_data')
+            fun(self, stdout, stderr, return_value, depmap=frag)
+        return test_decorated
+    return test_decorator
+
 def mvn_artifact(pom, jar=None):
     def test_decorator(fun):
         @wraps(fun)
