<?xml version="1.0" encoding="UTF-8"?>

<project name="commons-vfs2" default="package" basedir=".">

  <!-- ====================================================================== -->
  <!-- Build environment properties                                           -->
  <!-- ====================================================================== -->

  <include file="../common.xml"/>
  <property file="build.properties"/>

  <property name="project.name" value="Apache Commons VFS"/>
  <property name="project.artifactId" value="commons-vfs2"/>
  <property name="project.description" value="Apache Commons VFS is a Virtual File System library."/>


  <property name="build.finalName" value="${project.artifactId}-${project.version}"/>
  <property name="build.dir" value="target"/>
  <property name="build.outputDir" value="${build.dir}/classes"/>
  <property name="build.srcDir" value="src/main/java"/>
  <property name="build.resourceDir.0" value="src/main/java"/>
  <property name="build.resourceDir.1" value=".."/>
  <property name="build.testOutputDir" value="${build.dir}/test-classes"/>
  <property name="build.testDir" value="src/test/java"/>
  <property name="build.testResourceDir.0" value="src/test/resources"/>
  <property name="build.testResourceDir.1" value=".."/>
  <property name="test.reports" value="${build.dir}/test-reports"/>
  <property name="reporting.outputDirectory" value="${build.dir}/site"/>

  <property name="repo.local" value="${user.home}/.m2/repository"/>
  <property name="settings.offline" value="false"/>
  <property name="settings.interactiveMode" value="true"/>

  <!-- ====================================================================== -->
  <!-- Defining classpaths                                                    -->
  <!-- ====================================================================== -->

  <path id="build.classpath">
    <fileset dir="../lib">
      <!-- commons-logging-1.2 commons-net-3.6
           commons-compress-1.14 commons-collections4-4.1
           ant-1.10.5 ant-launcher-1.10.5
           hadoop-common-2.6.0 hadoop-hdfs-2.6.0
           commons-httpclient-3.1 commons-codec-1.2
           jsch-0.1.54 -->
      <include name="**/*.jar"/>
    </fileset>
  </path>
  <path id="build.test.classpath">
    <fileset dir="../lib">
    <!-- commons-logging-1.2 commons-net-3.6
         commons-compress-1.14 commons-collections4-4.1
         ant-1.10.5 ant-launcher-1.10.5
         hadoop-common-2.6.0 hadoop-hdfs-2.6.0
         commons-httpclient-3.1 commons-codec-1.2
         jsch-0.1.54 -->
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- ====================================================================== -->
  <!-- Cleaning up target                                                     -->
  <!-- ====================================================================== -->

  <target name="clean" description="Clean the output directory">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Compilation target                                                     -->
  <!-- ====================================================================== -->

  <target name="compile" description="Compile the code">
    <mkdir dir="${build.outputDir}"/>
    <javac destdir="${build.outputDir}" 
           encoding="UTF-8" 
           nowarn="false" 
           debug="true" 
           optimize="false" 
           deprecation="true" 
           target="${compiler.target}" 
           verbose="false" 
           fork="false" 
           source="${compiler.source}">
      <src>
        <pathelement location="${build.srcDir}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.outputDir}">
      <fileset dir="${build.resourceDir.0}">
        <exclude name="**/*.html"/>
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
    <mkdir dir="${build.outputDir}/META-INF"/>
    <copy todir="${build.outputDir}/META-INF">
      <fileset dir="${build.resourceDir.1}">
        <include name="NOTICE.txt"/>
        <include name="LICENSE.txt"/>
      </fileset>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Test-compilation target                                                -->
  <!-- ====================================================================== -->

  <target name="compile-tests" 
          depends="compile" 
          description="Compile the test code" 
          unless="test.skip">
    <mkdir dir="${build.testOutputDir}"/>
    <javac destdir="${build.testOutputDir}" 
           encoding="UTF-8" 
           nowarn="false" 
           debug="true" 
           optimize="false" 
           deprecation="true" 
           target="${compiler.target}" 
           verbose="false" 
           fork="false" 
           source="${compiler.source}">
      <src>
        <pathelement location="${build.testDir}"/>
      </src>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
    </javac>
    <copy todir="${build.testOutputDir}">
      <fileset dir="${build.testResourceDir.0}"/>
    </copy>
    <mkdir dir="${build.testOutputDir}/META-INF"/>
    <copy todir="${build.testOutputDir}/META-INF">
      <fileset dir="${build.testResourceDir.1}">
        <include name="NOTICE.txt"/>
        <include name="LICENSE.txt"/>
      </fileset>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Run all tests                                                          -->
  <!-- ====================================================================== -->

  <target name="test" 
          depends="compile-tests, junit-missing" 
          unless="junit.skipped" 
          description="Run the test cases">
    <mkdir dir="${test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.testOutputDir}"/>
      </classpath>
      <batchtest todir="${test.reports}" unless="test">
        <fileset dir="${build.testDir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <include name="**/*TestCase.java"/>
          <exclude name="**/RunTest.java"/>
          <exclude name="**/*$*"/>
        </fileset>
      </batchtest>
      <batchtest todir="${test.reports}" if="test">
        <fileset dir="${build.testDir}">
          <include name="**/${test}.java"/>
          <exclude name="**/RunTest.java"/>
          <exclude name="**/*$*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present" classpathref="build.test.classpath"/>
  </target>

  <target name="test-junit-status" 
          depends="test-junit-present">
    <condition property="junit.missing">
      <and>
        <isfalse value="${junit.present}"/>
        <isfalse value="${test.skip}"/>
      </and>
    </condition>
    <condition property="junit.skipped">
      <or>
        <isfalse value="${junit.present}"/>
        <istrue value="${test.skip}"/>
      </or>
    </condition>
  </target>

  <target name="junit-missing" 
          depends="test-junit-status" 
          if="junit.missing">
    <echo>=================================== WARNING ===================================</echo>
    <echo> JUnit is not present in the test classpath or your $ANT_HOME/lib directory. Tests not executed.</echo>
    <echo>===============================================================================</echo>
  </target>

  <!-- ====================================================================== -->
  <!-- Javadoc target                                                         -->
  <!-- ====================================================================== -->

  <target name="javadoc" description="Generates the Javadoc of the application">
    <javadoc sourcepath="${build.srcDir}" 
             packagenames="*" 
             destdir="${reporting.outputDirectory}/apidocs" 
             access="protected" 
             verbose="false" 
             encoding="UTF-8" 
             version="true" 
             use="true" 
             author="true" 
             splitindex="false" 
             nodeprecated="false" 
             nodeprecatedlist="false" 
             notree="false" 
             noindex="false" 
             nohelp="false" 
             nonavbar="false" 
             serialwarn="false" 
             docencoding="UTF-8" 
             source="${compiler.source}" 
             linksource="true" 
             breakiterator="false"
			 classpathref="build.classpath">
      <tag name="todo" 
               scope="all" 
               description="To Do:"/>
    </javadoc>
  </target>

  <!-- ====================================================================== -->
  <!-- Package target                                                         -->
  <!-- ====================================================================== -->

  <target name="package" depends="compile,test" description="Package the application">
    <jar jarfile="${build.dir}/${build.finalName}.jar" 
         compress="true" 
         index="false" 
         basedir="${build.outputDir}" 
         excludes="**/package.html">
      <manifest>
        <attribute name="Bundle-Description" value="${project.description}"/>
        <attribute name="Bundle-DocURL" value="${project.url}"/>
        <attribute name="Bundle-License" value="${project.license.url}"/>
        <attribute name="Bundle-ManifestVersion" value="2"/>
        <attribute name="Bundle-Name" value="${project.name}"/>
        <attribute name="Bundle-SymbolicName" value="${project.groupId}.${project.artifactId}"/>
        <attribute name="Bundle-Vendor" value="${project.organization.name}"/>
        <attribute name="Bundle-Version" value="${bundle.version}"/>
        <attribute name="Export-Package" value="org.apache.commons.vfs2;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.auth;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.cache;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.events;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.impl;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.operations;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.operations.vcs;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.bzip2;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.compressed;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.ftp;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.gzip;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.http;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.https;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.jar;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.local;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.ram;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.res;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.sftp;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.tar;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.temp;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.url;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.provider.zip;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.tasks;version=&quot;${project.version}&quot;,org.apache.commons.vfs2.util;version=&quot;${project.version}&quot;"/>
        <attribute name="Implementation-Title" value="${project.name}"/>
        <attribute name="Implementation-URL" value="${project.url}"/>
        <attribute name="Implementation-Vendor" value="${project.organization.name}"/>
        <attribute name="Implementation-Vendor-Id" value="org.apache"/>
        <attribute name="Implementation-Version" value="${project.version}"/>
        <attribute name="Import-Package" value="com.jcraft.jsch;version=&quot;[0.1,1)&quot;;resolution:=optional,javax.crypto,javax.crypto.spec,javax.xml.parsers,org.apache.commons.collections4.map;version=&quot;[4.1,5)&quot;;resolution:=optional,org.apache.commons.compress.archivers;version=&quot;[1.18,2)&quot;;resolution:=optional,org.apache.commons.compress.archivers.tar;version=&quot;[1.18,2)&quot;;resolution:=optional,org.apache.commons.compress.compressors.bzip2;version=&quot;[1.18,2)&quot;;resolution:=optional,org.apache.commons.httpclient;version=&quot;[3.1,4)&quot;;resolution:=optional,org.apache.commons.httpclient.auth;version=&quot;[3.1,4)&quot;;resolution:=optional,org.apache.commons.httpclient.methods;version=&quot;[3.1,4)&quot;;resolution:=optional,org.apache.commons.httpclient.params;version=&quot;[3.1,4)&quot;;resolution:=optional,org.apache.commons.httpclient.util;version=&quot;[3.1,4)&quot;;resolution:=optional,org.apache.commons.logging;version=&quot;[1.2,2)&quot;,org.apache.commons.net;version=&quot;[3.6,4)&quot;;resolution:=optional,org.apache.commons.net.ftp;version=&quot;[3.6,4)&quot;;resolution:=optional,org.apache.commons.net.ftp.parser;version=&quot;[3.6,4)&quot;;resolution:=optional,org.apache.tools.ant;resolution:=optional,org.w3c.dom"/>
        <attribute name="Include-Resource" value="org/apache/commons/vfs2/Resources.properties=src/main/java/org/apache/commons/vfs2/Resources.properties,org/apache/commons/vfs2/tasks/antlib.xml=src/main/java/org/apache/commons/vfs2/tasks/antlib.xml,org/apache/commons/vfs2/tasks/tasks.properties=src/main/java/org/apache/commons/vfs2/tasks/tasks.properties,org/apache/commons/vfs2/impl/providers.xml=src/main/java/org/apache/commons/vfs2/impl/providers.xml,META-INF/NOTICE.txt=../NOTICE.txt,META-INF/LICENSE.txt=../LICENSE.txt"/>
        <attribute name="JavaPackages-ArtifactId" value="${project.artifactId}"/>
        <attribute name="JavaPackages-GroupId" value="${project.groupId}"/>
        <attribute name="JavaPackages-Version" value="${project.version}"/>
        <attribute name="Require-Capability" value="osgi.ee;filter:=&quot;(&amp;(osgi.ee=JavaSE)(version=${compiler.target}))&quot;"/>
        <attribute name="Specification-Title" value="${project.name}"/>
        <attribute name="Specification-Vendor" value="${project.organization.name}"/>
        <attribute name="Specification-Version" value="${project.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- ====================================================================== -->
  <!-- A dummy target for the package named after the type it creates         -->
  <!-- ====================================================================== -->

  <target name="jar" depends="package" description="Builds the jar for the application"/>

</project>
