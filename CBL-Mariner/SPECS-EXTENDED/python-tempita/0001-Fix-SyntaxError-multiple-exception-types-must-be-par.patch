From a5f80a45d1b374ed943105cf528b64461b0a1857 Mon Sep 17 00:00:00 2001
From: Joel Capitao <jcapitao@redhat.com>
Date: Wed, 9 Feb 2022 10:25:52 +0100
Subject: [PATCH] Fix SyntaxError multiple exception types must be
 parenthesized

---
 tempita/__init__.py | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/tempita/__init__.py b/tempita/__init__.py
index 91407b3..2b7623c 100644
--- a/tempita/__init__.py
+++ b/tempita/__init__.py
@@ -292,7 +292,7 @@ class Template(object):
         try:
             try:
                 value = eval(code, self.default_namespace, ns)
-            except SyntaxError, e:
+            except (SyntaxError, e):
                 raise SyntaxError(
                     'invalid syntax in expression: %s' % code)
             return value
@@ -304,12 +304,12 @@ class Template(object):
             else:
                 arg0 = coerce_text(e)
             e.args = (self._add_line_info(arg0, pos),)
-            raise exc_info[0], e, exc_info[2]
+            raise (exc_info[0], e, exc_info[2])
 
     def _exec(self, code, ns, pos):
         __traceback_hide__ = True
         try:
-            exec code in self.default_namespace, ns
+            exec (code in self.default_namespace, ns)
         except:
             exc_info = sys.exc_info()
             e = exc_info[1]
@@ -317,7 +317,7 @@ class Template(object):
                 e.args = (self._add_line_info(e.args[0], pos),)
             else:
                 e.args = (self._add_line_info(None, pos),)
-            raise exc_info[0], e, exc_info[2]
+            raise (exc_info[0], e, exc_info[2])
 
     def _repr(self, value, pos):
         __traceback_hide__ = True
@@ -339,7 +339,7 @@ class Template(object):
             exc_info = sys.exc_info()
             e = exc_info[1]
             e.args = (self._add_line_info(e.args[0], pos),)
-            raise exc_info[0], e, exc_info[2]
+            raise (exc_info[0], e, exc_info[2])
         else:
             if self._unicode and isinstance(value, bytes):
                 if not self.default_encoding:
@@ -348,7 +348,7 @@ class Template(object):
                         '(no default_encoding provided)' % value)
                 try:
                     value = value.decode(self.default_encoding)
-                except UnicodeDecodeError, e:
+                except (UnicodeDecodeError, e):
                     raise UnicodeDecodeError(
                         e.encoding,
                         e.object,
-- 
2.32.0

