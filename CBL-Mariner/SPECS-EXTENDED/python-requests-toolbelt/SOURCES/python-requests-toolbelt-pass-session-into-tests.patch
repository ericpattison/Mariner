From 1314a8ea82f4dcfb23e670f17d1b40c23ba230c4 Mon Sep 17 00:00:00 2001
From: Alexander Mangin <mangin@yandex-team.ru>
Date: Wed, 3 Apr 2019 12:57:40 +0500
Subject: [PATCH] Pass session into some tests

---
 ...ream_response_without_content_length_to_file.json |  1 +
 tests/test_multipart_encoder.py                      | 12 ++++++------
 2 files changed, 7 insertions(+), 6 deletions(-)
 create mode 100644 tests/cassettes/stream_response_without_content_length_to_file.json

diff --git a/tests/cassettes/stream_response_without_content_length_to_file.json b/tests/cassettes/stream_response_without_content_length_to_file.json
new file mode 100644
index 0000000..f2bf898
--- /dev/null
+++ b/tests/cassettes/stream_response_without_content_length_to_file.json
@@ -0,0 +1 @@
+{"recorded_with": "betamax/0.4.1", "http_interactions": [{"request": {"uri": "https://api.github.com/repos/sigmavirus24/github3.py/releases/assets/37944", "method": "GET", "headers": {"Accept": ["application/octet-stream"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.5.3 CPython/2.7.9 Darwin/14.1.0"]}, "body": {"base64_string": "", "encoding": "utf-8"}}, "response": {"status": {"code": 302, "message": "Found"}, "url": "https://api.github.com/repos/sigmavirus24/github3.py/releases/assets/37944", "headers": {"access-control-allow-credentials": ["true"], "x-xss-protection": ["1; mode=block"], "vary": ["Accept-Encoding"], "location": ["https://s3.amazonaws.com/github-cloud/releases/3710711/365425c2-4e46-11e3-86fb-bb0d50a886e7.whl?response-content-disposition=attachment%3B%20filename%3Dgithub3.py-0.7.1-py2.py3-none-any.whl&response-content-type=application/octet-stream&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1426166613&Signature=78anFgNgXLm3TIbo%2FbTEEk7m%2F34%3D"], "x-content-type-options": ["nosniff"], "content-security-policy": ["default-src 'none'"], "x-ratelimit-limit": ["60"], "status": ["302 Found"], "x-frame-options": ["deny"], "x-served-by": ["8dd185e423974a7e13abbbe6e060031e"], "server": ["GitHub.com"], "access-control-allow-origin": ["*"], "strict-transport-security": ["max-age=31536000; includeSubdomains; preload"], "x-github-request-id": ["48A0C951:54E7:48B5311:55019319"], "date": ["Thu, 12 Mar 2015 13:22:33 GMT"], "access-control-expose-headers": ["ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval"], "x-ratelimit-remaining": ["58"], "content-type": ["text/html;charset=utf-8"], "x-ratelimit-reset": ["1426170017"]}, "body": {"base64_string": "", "encoding": "utf-8"}}, "recorded_at": "2015-03-12T13:22:33"}, {"request": {"uri": "https://s3.amazonaws.com/github-cloud/releases/3710711/365425c2-4e46-11e3-86fb-bb0d50a886e7.whl?response-content-disposition=attachment%3B%20filename%3Dgithub3.py-0.7.1-py2.py3-none-any.whl&response-content-type=application/octet-stream&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1426166613&Signature=78anFgNgXLm3TIbo%2FbTEEk7m%2F34%3D", "method": "GET", "headers": {"Accept": ["application/octet-stream"], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "User-Agent": ["python-requests/2.5.3 CPython/2.7.9 Darwin/14.1.0"]}, "body": {"base64_string": "", "encoding": "utf-8"}}, "response": {"status": {"code": 200, "message": "OK"}, "url": "https://s3.amazonaws.com/github-cloud/releases/3710711/365425c2-4e46-11e3-86fb-bb0d50a886e7.whl?response-content-disposition=attachment%3B%20filename%3Dgithub3.py-0.7.1-py2.py3-none-any.whl&response-content-type=application/octet-stream&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1426166613&Signature=78anFgNgXLm3TIbo%2FbTEEk7m%2F34%3D", "headers": {"accept-ranges": ["bytes"], "content-disposition": ["attachment; filename=github3.py-0.7.1-py2.py3-none-any.whl"], "x-amz-id-2": ["9+TuHhbd7y2BUJaEV+mFpaDgjl1g9uSAPiZxwc6b2cYydhlhZSyKSuB7PQyiPBPD"], "x-amz-meta-surrogate-key": ["repository-3710711 user-240830"], "x-amz-request-id": ["4B4BFE6BF5135B8D"], "last-modified": ["Fri, 15 Nov 2013 22:35:23 GMT"], "x-amz-meta-surrogate-control": ["max-age=31557600"], "etag": ["\"6550854f02f7bf10b944070b84f38313\""], "date": ["Thu, 12 Mar 2015 13:22:35 GMT"], "cache-control": ["max-age=31557600"], "content-type": ["application/octet-stream"], "server": ["AmazonS3"]}, "body": {"base64_string": "", "encoding": null}}, "recorded_at": "2015-03-12T13:22:34"}]}
diff --git a/tests/test_multipart_encoder.py b/tests/test_multipart_encoder.py
index 575f54c..2d143ae 100644
--- a/tests/test_multipart_encoder.py
+++ b/tests/test_multipart_encoder.py
@@ -91,14 +91,14 @@ def test_accepts_encoded_strings_with_unicode(self):
 
 class TestFileFromURLWrapper(unittest.TestCase):
     def setUp(self):
-        s = requests.Session()
-        self.recorder = get_betamax(s)
+        self.session = requests.Session()
+        self.recorder = get_betamax(self.session)
 
     def test_read_file(self):
         url = ('https://stxnext.com/static/img/logo.830ebe551641.svg')
         with self.recorder.use_cassette(
                 'file_for_download', **preserve_bytes):
-            self.instance = FileFromURLWrapper(url)
+            self.instance = FileFromURLWrapper(url, session=self.session)
             assert self.instance.len == 5177
             chunk = self.instance.read(20)
             assert chunk == b'<svg xmlns="http://w'
@@ -116,9 +116,9 @@ def test_no_content_length_header(self):
             'assets/37944'
         )
         with self.recorder.use_cassette(
-                'stream_response_to_file', **preserve_bytes):
+                'stream_response_without_content_length_to_file', **preserve_bytes):
             with self.assertRaises(FileNotSupportedError) as context:
-                FileFromURLWrapper(url)
+                FileFromURLWrapper(url, session=self.session)
             assert context.exception.__str__() == (
                 'Data from provided URL https://api.github.com/repos/s'
                 'igmavirus24/github3.py/releases/assets/37944 is not '
@@ -198,7 +198,7 @@ def test_reads_file_from_url_wrapper(self):
         with recorder.use_cassette(
                 'file_for_download'):
             m = MultipartEncoder(
-                [('field', 'foo'), ('file', FileFromURLWrapper(url))])
+                [('field', 'foo'), ('file', FileFromURLWrapper(url, session=s))])
         assert m.read() is not None
 
     def test_reads_open_file_objects_with_a_specified_filename(self):
